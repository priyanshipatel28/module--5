-- Q- 1.	Create Table Name : Student and Exam

CREATE TABLE STUDENTS
(
	ROLL_NO INT PRIMARY KEY,
	NAME VARCHAR(50) NOT NULL UNIQUE,
	BRANCH VARCHAR(100) NOT NULL
);

CREATE TABLE EXAM
(
	ROLL_NO INT,
    S_CODE VARCHAR(10) NOT NULL,
    MARKS INT NOT NULL,
    P_CODE VARCHAR(2) NOT NULL,
    FOREIGN KEY EXAM(ROLL_NO) REFERENCES STUDENTS(ROLL_NO)
 );
 
 
 INSERT INTO STUDENTS VALUES( 1 ,'Jay','Computer Science');
 INSERT INTO STUDENTS VALUES( 2 , 'Suhani' , 'Electronic and Com');
 INSERT INTO STUDENTS VALUES( 3 , 'Kriti' , 'Electronic and Com');
 
-- TRUNCATE TABLE STUDENTS;
 
 INSERT INTO EXAM VALUES( 1 , 'CS11' , 50 , 'CS');
 INSERT INTO EXAM VALUES( 1 , 'CS12' , 60 , 'CS');
 INSERT INTO EXAM VALUES( 2 , 'EC101' , 66 , 'EC');
 INSERT INTO EXAM VALUES( 2 , 'EC102' , 70 , 'EC');
 INSERT INTO EXAM VALUES( 3 , 'EC101' , 45 , 'EC');
 INSERT INTO EXAM VALUES( 3 , 'EC102' , 50 , 'EC'); 
 
 SELECT * FROM STUDENTS;
 SELECT * FROM EXAM;
 
 -- Q-2	Create table given below: Employee and IncentiveTable
 
 CREATE TABLE EMPLOYEE_Q2
 (
	EMPLOYEE_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(10) NOT NULL ,
    LAST_NAME VARCHAR(15) NOT NULL,
    SALARY INT NOT NULL,
    JOINING_DATE VARCHAR(50) NOT NULL, -- DATE AND TIME IS NOT POSSIBLE BECAUSE I HAVE TO MAKE DATE AS 01-JAN-12 12.00.00 AM
    -- SO TO MAKE IT LIKE THIS VARCHAR() WILL BE GOOD OPTION
    DEPARTMENT VARCHAR(15) NOT NULL
 );
 
-- ALTER TABLE EMPLOYEE_Q2 MODIFY JOINING_DATE VARCHAR(15) TIME, NOT NULL;
-- UPDATE EMPLOYEE_Q2 SET JOINING_DATE = date_format(HIRE_DATE,'%d-%b-%y');
 
 
 CREATE TABLE INCENTIVE
 (
 EMPLOYEE_ID INT NOT NULL,
 INCENTIVE_DATE DATE NOT NULL,
 INCENTIVE_AMOUNT INT NOT NULL,
 -- INCENTIVE_AMOUNT DECIMAL(4,2) NOT NULL,
 FOREIGN KEY INCENTIVE(EMPLOYEE_ID) REFERENCES EMPLOYEE_Q2(EMPLOYEE_ID) 
 );
 
 DROP TABLE INCENTIVE;
 
 ALTER TABLE INCENTIVE MODIFY INCENTIVE_DATE VARCHAR(10) NOT NULL;
 UPDATE INCENTIVE SET INCENTIVE_DATE = DATE_FORMAT(INCENTIVE_DATE, '%d -%b -%y');
 
 COMMIT;
 
 INSERT INTO EMPLOYEE_Q2 VALUES( 1 ,'John' , 'Abraham', '1000000','01-JAN-13  12.00.00 AM','Banking');
 INSERT INTO EMPLOYEE_Q2 VALUES( 2 ,'Michael' , 'Clarke', '800000' , '01-JAN-13 12.00.00 AM', 'Insurance');
 INSERT INTO EMPLOYEE_Q2 VALUES( 3 ,'Roy' , 'Thomas', '700000','01-FEB-13  12.00.00 AM','Banking');
 INSERT INTO EMPLOYEE_Q2 VALUES( 4 ,'Tom' , 'Jose', '600000','01-FEB-13  12.00.00 AM','Insurance');
 INSERT INTO EMPLOYEE_Q2 VALUES( 5 ,'Jerry','Pinto','650000','01-FEB-13  12.00.00 AM','Insurance');
 INSERT INTO EMPLOYEE_Q2 VALUES( 6 ,'Philip','Mathew','750000','01-JAN-13  12.00.00 AM','Services');
 INSERT INTO EMPLOYEE_Q2 VALUES( 7 ,'TestName1', 123 ,'650000','01-JAN-13  12.00.00 AM','Services');
 INSERT INTO EMPLOYEE_Q2 VALUES( 8 ,'TestNAME2','Lname%','600000','01-FEB-13  12.00.00 AM','Insurance');
 
 select * from EMPLOYEE_Q2;
 
INSERT INTO INCENTIVE VALUES( 1,'01-FEB-13',5000);
INSERT INTO INCENTIVE VALUES( 2,'01-FEB-13',3000);
INSERT INTO INCENTIVE VALUES( 3,'01-FEB-13',4000);
INSERT INTO INCENTIVE VALUES( 1,'01-JAN-13',4500);
INSERT INTO INCENTIVE VALUES( 2,'01-JAN-13',3500);
 
 truncate incentive;
 SELECT * FROM INCENTIVE;
 select * from EMPLOYEE_Q2;
 
 -- 3.	Get First_Name from employee table using Tom name “Employee Name”.
 SELECT FIRST_NAME FROM EMPLOYEE_Q2 WHERE  FIRST_NAME = 'Tom';
 
 -- 4.	Get FIRST_NAME, Joining Date, and Salary from employee table.
 SELECT FIRST_NAME, JOINING_DATE, SALARY FROM EMPLOYEE_Q2;
 
 -- 5.	Get all employee details from the employee table order by First_Name Ascending and Salary descending?
SELECT * FROM EMPLOYEE_Q2 ORDER BY FIRST_NAME ASC,SALARY DESC;-- NOT IMPLEMENTING PERFECTLY
SELECT * FROM EMPLOYEE_Q2 ORDER BY FIRST_NAME ASC;
SELECT * FROM EMPLOYEE_Q2 ORDER BY SALARY DESC; 
 
 -- 6.	Get employee details from employee table whose first name contains ‘J’.
 SELECT * FROM EMPLOYEE_Q2 WHERE FIRST_NAME LIKE 'J%';

-- 7.	Get department wise maximum salary from employee table order by salaryascending?
SELECT DEPARTMENT, MAX(SALARY) AS MAXSAL FROM EMPLOYEE_Q2 ORDER BY MAXSAL ASC; -- NOT POSSIBLE WITHOUT GROUP WHY
SELECT DEPARTMENT, MAX(SALARY) AS MAXSAL FROM EMPLOYEE_Q2 GROUP BY DEPARTMENT ORDER BY MAXSAL ASC;

-- 9.	Select first_name, incentive amount from employee and incentives table forthose employees
-- who have incentives and incentive amount greater than 3000
 -- SELECT FIRST_NAME, INCENTIVE_AMOUNT from EMPLOYEE_Q2 AND SELECT INCENTIVES  WHERE INCENTIVE_AMOUNT > 3000;
SELECT employee_q2.FIRST_NAME,INCENTIVE.INCENTIVE_AMOUNT
FROM employee_q2
INNER JOIN incentive ON INCENTIVE.EMPLOYEE_ID = employee_q2.EMPLOYEE_ID WHERE INCENTIVE.INCENTIVE_AMOUNT>3000;

-- 10.	Create After Insert trigger on Employee table which insert records in viewtable
CREATE VIEW EMPLOYE AS 
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEE_Q2;

DELIMITER &&
CREATE TRIGGER HELLO
AFTER INSERT ON EMPLOYEE_Q2
FOR EACH ROW
BEGIN
	INSERT INTO EMPLOYEE_Q2(EMPLOYEE_ID,FIRST_NAME, lAST_NAME,SALARY) VALUES (101,'PRIYA','PATEL',250000);
END;
END&&

DROP VIEW EMPLOYEE;

SELECT * FROM EMPLOYE;
-- Q-3	Create table given below: Salesperson and Customer
-- table-1  (TABLE NAME - SALESPERSON)

CREATE TABLE SALESPERSON(
SNO INT PRIMARY KEY,
SNAME VARCHAR(20) NOT NULL,
CITY VARCHAR(20) NOT NULL,
COMM FLOAT NOT NULL
);

INSERT INTO SALESPERSON VALUES (1001,'Peel','London',.12);
INSERT INTO SALESPERSON VALUES (1002,'Serres','San Jose',.13);
INSERT INTO SALESPERSON VALUES (1004,'Motika','London',.11);
INSERT INTO SALESPERSON VALUES (1007,'Rafkin','Barcelona',.15);
INSERT INTO SALESPERSON VALUES (1003,'Axelrod','New York',.1);

SELECT * FROM SALESPERSON;

-- TABLE-2   (TABLE NAME - CUSTOMER)

CREATE TABLE CUSTOMER(
CNM INT PRIMARY KEY,
CNAME VARCHAR(20) NOT NULL UNIQUE,
CITY VARCHAR(20) NOT NULL,
RATING INT NOT NULL,
SNO INT NOT NULL,
FOREIGN KEY (SNO) REFERENCES SALESPERSON(SNO)
);

INSERT INTO CUSTOMER VALUES(201,'Hoffman','London',100,1001);
INSERT INTO CUSTOMER VALUES(202,'Glovanne','Roe',200,1003);
INSERT INTO CUSTOMER VALUES(203,'Liu','San Jose',300,1002);
INSERT INTO CUSTOMER VALUES(204,'Grass','Barcelona',100,1002);
INSERT INTO CUSTOMER VALUES(206,'Clemens','London',300,1007);
INSERT INTO CUSTOMER VALUES(207,'Pereira','Roe',100,1004);

SELECT * FROM CUSTOMER;

 COMMIT;
 
 -- Retrieve the below data from above table
 
 -- 13.	All orders for more than $1000.(NOT A VALID QUESTION FOR THE ABOVE DATA, BECAUSE THERE IS NOT COLOUM FOR ORDERS)
 
 -- 14.	Names and cities of all salespeople in London with commission above 0.12
 SELECT SNAME, CITY FROM SALESPERSON WHERE CITY = 'lONDON' AND COMM >.12 ;
 
 -- 15.	All salespeople either in Barcelona or in London
 SELECT * FROM SALESPERSON WHERE CITY = 'BARCELONA' OR CITY = 'LONDON';
 
 -- 16.	All salespeople with commission between 0.10 and 0.12. (Boundary values should be excluded- NOT PRESENT IN IT).
 SELECT * FROM SALESPERSON WHERE COMM>0.10 AND COMM<0.12;
 
 -- 17.	All customers excluding those with rating <= 100 unless they are located inRome
 SELECT * FROM CUSTOMER WHERE RATING>100 OR CITY = 'Roe';
 
 -- 18.	Write a SQL statement that displays all the information about all salespeople
 
 CREATE TABLE SALESPERSON_1(
 SALESMAN_ID INT PRIMARY KEY,
 NAME VARCHAR(50) NOT NULL,
 CITY VARCHAR(50) NOT NULL,
 COMMISSION FLOAT NOT NULL
 );
 
INSERT INTO SALESPERSON_1 VALUES(5001,'JAMES HOOG','NEW YORK',0.15);
INSERT INTO SALESPERSON_1 VALUES(5002,'NAIL KNITE','PARIS',0.13);
INSERT INTO SALESPERSON_1 VALUES(5005,'PIT ALEX','LONDON',0.11);
INSERT INTO SALESPERSON_1 VALUES(5006,'MC LYON','PARIS',0.14);
INSERT INTO SALESPERSON_1 VALUES(5007,'PAUL ADAM','ROME',0.13);
INSERT INTO SALESPERSON_1 VALUES(5003,'LAUSON HEN','SAN JOSE',0.12);

SELECT * FROM SALESPERSON_1;

-- 19.	From the following table, write a SQL query to find orders that are
--  delivered by a salesperson with ID. 5001.
--  Return ord_no, ord_date, purch_amt.

-- TABLE - ORDERS
CREATE TABLE ORDERS_1(
ORD_NO INT PRIMARY KEY,
PURCH_AMT FLOAT NOT NULL,
ORD_DATE DATE NOT NULL, 
CUSTOMER_ID INT NOT NULL,
SALESMAN_ID INT NOT NULL
);

INSERT INTO ORDERS_1 VALUES(70001,150.5,'2012-10-05',3005,5002);
INSERT INTO ORDERS_1 VALUES(70009,270.65,'2012-09-10',3001,5005);
INSERT INTO ORDERS_1 VALUES(70002,65.26,'2012-10-05',3002,5001);
INSERT INTO ORDERS_1 VALUES(70004,110.5,'2012-08-17',3009,5003);
INSERT INTO ORDERS_1 VALUES(70007,948.5,'2012-09-10',3005,5002);
INSERT INTO ORDERS_1 VALUES(70005,2400.6,'2012-07-27',3007,5001);
INSERT INTO ORDERS_1 VALUES(70008,5760,'2012-09-10',3002,5001);
INSERT INTO ORDERS_1 VALUES(70010,1983.43,'2012-10-10',3004,5006);
INSERT INTO ORDERS_1 VALUES(70003,2480.4,'2012-10-10',3009,5003);
INSERT INTO ORDERS_1 VALUES(70012,250.45,'2012-06-27',3008,5002);
INSERT INTO ORDERS_1 VALUES(70011,75.29,'2012-08-17',3003,5007);
INSERT INTO ORDERS_1 VALUES(70013,3045.6,'2012-04-25',3002,5001);


SELECT * FROM ORDERS_1;
-- SQL QUERY
SELECT ORD_NO, ORD_DATE, PURCH_AMT FROM ORDERS_1 WHERE SALESMAN_ID = 5001;

-- Q-4  Sample table: item_mast

CREATE TABLE ITEM_MAST(
PRO_ID INT PRIMARY KEY,
PRO_NAME VARCHAR(50) NOT NULL UNIQUE,
PRO_PRICE FLOAT NOT NULL,
PRO_COM INT NOT NULL
);

INSERT INTO ITEM_MAST VALUES (101,'MOTHER BOARD',3200.00,15);
INSERT INTO ITEM_MAST VALUES (102,'KEYBOARD',450.00,16);
INSERT INTO ITEM_MAST VALUES (103,'ZIP DRIVE',250.00,14);
INSERT INTO ITEM_MAST VALUES (104,'SPEAKER',550.00,16);
INSERT INTO ITEM_MAST VALUES (105,'MONITOR',5000.00,11);
INSERT INTO ITEM_MAST VALUES (106,'DVD DRIVE',900.00,12);
INSERT INTO ITEM_MAST VALUES (107,'CD DRIVE',800.00,12);
INSERT INTO ITEM_MAST VALUES (108,'PRINTER',2600.00,13);
INSERT INTO ITEM_MAST VALUES (109,'REFILL CARTRIDGE',350.00,13);
INSERT INTO ITEM_MAST VALUES (110,'MOUSE',250.00,12);

SELECT * FROM ITEM_MAST;

-- Q-20.	From the following table, write a SQL query to select a range of products whose price is in the range Rs.200 to Rs.600.
-- Begin and end values are included. Return pro_id, pro_name, pro_price, and pro_com.
SELECT PRO_ID, PRO_NAME, PRO_PRICE AS PRICE , PRO_COM FROM ITEM_MAST WHERE PRO_PRICE>=200 AND PRO_PRICE<=600;
-- 21.	From the following table, 
-- write a SQL query to calculate the average price for a manufacturer code of 16. Return avg.
SELECT AVG(PRO_PRICE) AS AVERAGE_PRICE FROM ITEM_MAST GROUP BY PRO_COM HAVING PRO_COM = 16;
SELECT AVG(PRO_PRICE) AS AVERAGE_PRICE FROM ITEM_MAST WHERE PRO_COM = 16;

-- 22.	From the following table, write a SQL query to display the pro_name as 'Item Name' and pro_priceas 'Price in Rs.'
SELECT PRO_NAME AS 'ITEM_NAME', PRO_PRICE AS 'PRICE_IN_RS.' FROM ITEM_MAST; 

-- 23.	From the following table, write a SQL query to find the items whose prices are higher than or equal to $250.
-- Order the result by product price in descending, 
-- then product name in ascending. Return pro_name and pro_price.
SELECT PRO_NAME , PRO_PRICE FROM ITEM_MAST WHERE PRO_PRICE>=250 ORDER BY PRO_PRICE DESC, PRO_NAME ASC ;-- HERE IT WILL ORDER IN DESC, BECAUSE IT IS WRITTEN FIRST
SELECT PRO_NAME , PRO_PRICE FROM ITEM_MAST WHERE PRO_PRICE>=250 ORDER BY PRO_PRICE DESC;

SELECT PRO_NAME , PRO_PRICE FROM ITEM_MAST WHERE PRO_PRICE>=250 ORDER BY PRO_NAME ASC ;
SELECT PRO_NAME , PRO_PRICE FROM ITEM_MAST WHERE PRO_PRICE>=250 ORDER BY PRO_NAME ASC,PRO_PRICE DESC ;-- HERE IT IS ORDER IN ASC, BECAUSE IT IS WRITTEN FIRST


-- 24.	From the following table, write a SQL query to calculate average price of the items for each company.
-- Return average price and companycode.
SELECT AVG(PRO_PRICE) AS AVERAGE_PRICE, PRO_COM FROM ITEM_MAST GROUP BY PRO_COM HAVING PRO_COM = 11 OR 12 OR 13;
SELECT AVG(PRO_PRICE) AS AVERAGE_PRICE, PRO_COM FROM ITEM_MAST GROUP BY PRO_COM HAVING PRO_COM = 11 OR PRO_COM = 12
OR PRO_COM = 13 OR PRO_COM = 14 OR PRO_COM = 15 OR PRO_COM = 16 ;
SELECT AVG(PRO_PRICE) AS AVERAGE_PRICE, PRO_COM FROM ITEM_MAST GROUP BY PRO_COM HAVING PRO_COM IN (11,12,13,14,15,16);

commit;